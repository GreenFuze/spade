---
alwaysApply: true
---
# Programming Idioms, Philosophies, and Principles (Concise Cursor Prompt)

## File & Documentation
- **File head:** After imports/includes, add a short, one-paragraph summary (purpose, responsibilities, key collaborators).
- **Paragraph-level docs:** Inside functions/methods, document the *why* of each logical step.
- **Readability:** Use blank lines to separate “paragraphs” of logic.

## Core Philosophy
- **OOP-first** where the language supports objects.
- **Fail-Fast:** Unexpected ⇒ raise immediately with a precise, actionable message. No silent failures or hidden fallbacks.
- **SRP & SoC:** Single Responsibility + Separation of Concerns.
- **DRY & RAII:** Eliminate duplication; deterministic resource management.
- **Strong typing:** Prefer explicit typing/hints; enforce with type checkers/linters.

## Type Safety & Data Validation
- Prefer **compile-time guarantees** over runtime checks.
- **Enums over strings**; use `.value` only at boundaries.
- Avoid casting unless unavoidable and safe.
- **Python:** Use **Pydantic** models for all structured data (no ad-hoc dicts); encode validation rules in models.

## Architecture Patterns
- **Manager / Facade**
  - Central manager registry (single initialization), accessed by alias—**no local copies**.
  - Managers are the only components that access their own config files.
- **Active Object**
  - Per-agent task queues; sequential ops within an agent; concurrency across agents.

## Error Handling & Recovery
- **Raise, don’t log-and-continue**; let errors bubble to the correct layer.
- Correct HTTP status codes (4xx validation, 5xx runtime).
- Provide user-facing recovery guidance; enable LLM auto-recovery via clear feedback.
- **WebSockets:** Fail fast on invalid/missing connections; handle errors & disconnections gracefully.

## Data & Configuration
- Human-readable **YAML** config under VCS; combine static config with runtime discovery.
- No hardcoded values—inject or configure.
- Prefer immutability; isolate state; explicit state transitions; proper locking for shared resources.

## Testing & Quality
- Tests fail fast with clear messages; cover critical paths (unit + integration).
- Enforce **type checking** and **linting** in CI; keep docs current.
- Keep functions small; use meaningful names; remove dead code/imports.

## UX & Real-Time
- Immediate, clear feedback; visible status/loading states.
- Prevent user errors; surface recovery paths.

## Security
- Validate all inputs; **never** log secrets.
- Proper authentication when needed; secure transport.

## Development Workflow
- Prefer **single-server** architecture unless well-justified.
- Serve files directly when feasible; provide unified scripts for common tasks.
- CI gates: build, lint, type-check, tests on PRs; feature branches; clear commit messages.
- **TypeScript:** compilation/type checks must gate merges.

## Async & WebSockets
- Use **async/await** correctly; never block the event loop.
- Schedule background tasks explicitly; deterministic cleanup and cancellation.
- Track connections; route messages by handler; add reconnection logic.

## Class / Object Member Order (All Languages)
**Top → Bottom**
1. **public static fields**
2. **private static fields**
3. **public static functions**
4. **public fields**
5. **private fields**
6. **constructors**
7. **public methods**
8. **private methods**

### Method / Constructor Separators
Insert a single comment line between methods/constructors (use the language’s single-line comment). C++ example: `//-------------------------------------------`

## Code Review Quick Checklist
- [ ] Fail-fast behavior; no hidden fallbacks/silent failures
- [ ] Strong typing + annotations; enums not strings
- [ ] No duplication (DRY); small, focused functions
- [ ] Errors raised with context; correct HTTP codes
- [ ] Thread/async safety; no blocking in async paths
- [ ] No dead code; meaningful names; docs updated
- [ ] Tests included; CI passes (lint, type, tests)
- [ ] Security: inputs validated; no secrets in logs
- [ ] Member order & separators followed; file summary present

## Anti-Patterns to Avoid
- Silent failures; deep nesting; magic numbers; long (>~30 lines) unfocused functions
- Tight coupling; global mutable state
- Premature optimization; blocking calls in async code; resource leaks

## Bug-Fix Confidence
- If not 100% confident, add **targeted logs/assertions** whose presence/absence validates the fix quickly.

---

## Language-Specific Notes

### Python
- **Pydantic** for all data models (validation in models; `default_factory` where useful).
- Prefer `Enum`; avoid raw strings.
- Type check with **mypy/pyright**; format with **black**; lint with **ruff**.
- **asyncio:** explicit task lifetimes; cancel & cleanup; avoid CPU/blocking in the event loop.

### TypeScript
- `"strict": true`; fail CI on type errors.
- Narrow types with guards; localize any `any`.
- DTOs as interfaces/types; validate at boundaries (e.g., zod) if runtime checks are needed.

### C++
- RAII for all resources; smart pointers; value semantics.
- No raw owning pointers; explicit move/copy semantics.
- `enum class`; const-correctness; `noexcept` where appropriate.
